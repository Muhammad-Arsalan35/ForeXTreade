import React, { useState, useEffect, useCallback } from "react";
import { 
  Share2, 
  Copy, 
  Users, 
  TrendingUp, 
  Gift,
  MessageSquare,
  Facebook,
  Twitter,
  Send,
  Loader2,
  AlertCircle,
  RefreshCw
} from "lucide-react";
import QRCode from "qrcode.react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import type { Toast } from "@/components/ui/toast";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";

interface ReferralStat {
  title: string;
  value: string;
  icon: React.ElementType;
  color: string;
  currency?: string;
}

interface TeamStructure {
  level: string;
  members: number;
  commission: string;
  earnings: string;
  validity: string;
}

interface UserProfile {
  id: string;
  referral_code: string;
  total_referral_earnings: number;
  referral_count: number;
}

export function Invite() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [referralStats, setReferralStats] = useState<ReferralStat[]>([]);
  const [teamStructure, setTeamStructure] = useState<TeamStructure[]>([]);
  const [inviteCode, setInviteCode] = useState("");
  const [referralUrl, setReferralUrl] = useState("");
  const [totalEarnings, setTotalEarnings] = useState(0);
  const [copied, setCopied] = useState<{type: string, visible: boolean}>({type: '', visible: false});
  const { toast } = useToast();
  
  const showToast = ({
    title,
    description,
    variant = 'default',
  }: {
    title: string;
    description: string;
    variant?: 'default' | 'destructive';
  }) => {
    toast({
      title,
      description,
      variant,
    });
  };
  const navigate = useNavigate();

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      
      // Get current authenticated user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        navigate('/login');
        return;
      }

      // Fetch user profile from users table
      const { data: profileData, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('auth_user_id', user.id)
        .single();

      if (profileError) {
        console.error('Error fetching user profile:', profileError);
        showToast({
          title: "Error",
          description: "Failed to load user profile. Please try again.",
          variant: "destructive"
        });
        return;
      }
      
      setUserProfile(profileData);
      setInviteCode(profileData.referral_code);
      
      // Generate referral URL with the current domain
      const baseUrl = window.location.origin;
      const referralLink = `${baseUrl}/signup?ref=${profileData.referral_code}`;
      setReferralUrl(referralLink);

      // Count team members by level
      const { data: teamData, error: teamError } = await supabase
        .from('referrals')
        .select(`
          level,
          referred_id
        `)
        .eq('referrer_id', profileData.id);

      if (teamError) {
        console.error('Error fetching team data:', teamError);
      }

      // Count referrals by level
      const aTeamCount = teamData?.filter(t => t.level === 'A').length || 0;
      const bTeamCount = teamData?.filter(t => t.level === 'B').length || 0;
      const cTeamCount = teamData?.filter(t => t.level === 'C').length || 0;
      const totalReferrals = aTeamCount + bTeamCount + cTeamCount;

      // Fetch commission rates
      const { data: ratesData, error: ratesError } = await supabase
        .from('commission_rates')
        .select('*')
        .single();

      if (ratesError) {
        console.error('Error fetching commission rates:', ratesError);
      }

      // Fetch referral earnings from referral_commissions table
      const { data: earningsData, error: earningsError } = await supabase
        .from('referral_commissions')
        .select('level, amount')
        .eq('user_id', profileData.id);
        
      if (earningsError) {
        console.error('Error fetching earnings data:', earningsError);
      }
      
      // Calculate earnings by level
      const aLevelEarnings = earningsData?.filter(e => e.level === 'A').reduce((sum, e) => sum + e.amount, 0) || 0;
      const bLevelEarnings = earningsData?.filter(e => e.level === 'B').reduce((sum, e) => sum + e.amount, 0) || 0;
      const cLevelEarnings = earningsData?.filter(e => e.level === 'C').reduce((sum, e) => sum + e.amount, 0) || 0;
      const calculatedTotalEarnings = aLevelEarnings + bLevelEarnings + cLevelEarnings;
      setTotalEarnings(calculatedTotalEarnings);

      // Update referral stats
      setReferralStats([
        {
          title: "Total Referrals",
          value: totalReferrals.toString(),
          icon: Users,
          color: "text-primary"
        },
        {
          title: "Active Referrals", 
          value: totalReferrals.toString(), // Assuming all referrals are active
          icon: TrendingUp,
          color: "text-success"
        },
        {
          title: "Referral Earnings",
          value: calculatedTotalEarnings.toFixed(2),
          currency: "PKR",
          icon: Gift,
          color: "text-success"
        }
      ]);

      // Update team structure
      setTeamStructure([
        {
          level: "A Team (Direct)",
          members: aTeamCount,
          commission: `${ratesData?.a_level_commission_percentage || 12}%`,
          earnings: `${aLevelEarnings.toFixed(2)} PKR`,
          validity: `${aTeamCount}/${aTeamCount}`
        },
        {
          level: "B Team (Level 2)",
          members: bTeamCount,
          commission: `${ratesData?.b_level_commission_percentage || 4}%`,
          earnings: `${bLevelEarnings.toFixed(2)} PKR`, 
          validity: `${bTeamCount}/${bTeamCount}`
        },
        {
          level: "C Team (Level 3)",
          members: cTeamCount,
          commission: `${ratesData?.c_level_commission_percentage || 2}%`,
          earnings: `${cLevelEarnings.toFixed(2)} PKR`,
          validity: `${cTeamCount}/${cTeamCount}`
        }
      ]);

    } catch (error: unknown) {
      console.error('Error fetching data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load referral data';
      setError(errorMessage);
      showToast({
        title: "Error",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  }, [navigate, showToast]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);
  };

  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied({type, visible: true});
      setTimeout(() => setCopied(prev => ({...prev, visible: false})), 2000);
      showToast({
        title: "Copied!",
        description: `${type} copied to clipboard`
      });
    } catch (error: unknown) {
      console.error('Failed to copy:', error);
      showToast({
        title: "Error",
        description: "Failed to copy to clipboard. Please try again.",
        variant: "destructive"
      });
    }
  };

  const shareViaApp = (platform: string) => {
    const text = `Join ForeXTreade and start earning! Use my invite code: ${inviteCode} or visit: ${referralUrl}`;
    
    if (platform === "whatsapp") {
      window.open(`https://wa.me/?text=${encodeURIComponent(text)}`);
    } else if (platform === "telegram") {
      window.open(`https://t.me/share/url?url=${encodeURIComponent(referralUrl)}&text=${encodeURIComponent(text)}`);
    } else if (platform === "facebook") {
      window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(referralUrl)}`);
    } else if (platform === "twitter") {
      window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`);
    }
  };

  return (
    <div className="container mx-auto px-4 py-6 space-y-6">
      {loading ? (
        <div className="flex flex-col items-center justify-center min-h-[60vh]">
          <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
          <p className="text-muted-foreground">Loading your referral data...</p>
        </div>
      ) : error ? (
        <div className="flex flex-col items-center justify-center min-h-[60vh] text-center p-4">
          <AlertCircle className="h-12 w-12 text-destructive mb-4" />
          <h3 className="text-xl font-semibold mb-2">Error Loading Data</h3>
          <p className="text-muted-foreground mb-4">{error}</p>
          <Button onClick={fetchData} variant="outline">
            <RefreshCw className="w-4 h-4 mr-2" />
            Try Again
          </Button>
        </div>
      ) : (
      <>
      {/* Page Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-2">Invite Friends</h1>
        <p className="text-muted-foreground">Share and earn rewards together</p>
      </div>

      {/* Referral Stats */}
      <div className="grid grid-cols-3 gap-4">
        {referralStats.map((stat, index) => (
          <Card key={index} className="shadow-card">
            <CardContent className="p-4 text-center">
              <stat.icon className={`w-8 h-8 mx-auto mb-2 ${stat.color}`} />
              <p className="text-2xl font-bold">
                {stat.value}
                {stat.currency && <span className="text-sm ml-1">{stat.currency}</span>}
              </p>
              <p className="text-xs text-muted-foreground">{stat.title}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* QR Code and Invite Code */}
      <Card className="bg-gradient-golden shadow-golden">
        <CardContent className="p-6 text-center">
          <div className="bg-white p-4 rounded-lg inline-block mb-4">
            <div className="p-2 bg-white rounded">
              <QRCode 
                value={referralUrl} 
                size={140}
                level="H"
                includeMargin={true}
                renderAs="svg"
                className="mx-auto"
              />
            </div>
          </div>
          
          <h3 className="text-xl font-bold text-primary-foreground mb-2">Your Invitation Code</h3>
          
          <div className="bg-white/20 rounded-lg p-4 mb-4">
            <p className="text-3xl font-bold text-primary-foreground tracking-widest">
              {inviteCode}
            </p>
          </div>

          <Button 
            variant="secondary" 
            onClick={() => copyToClipboard(inviteCode, "Invite code")}
            className="bg-white/20 hover:bg-white/30 border-white/30 text-primary-foreground mb-4"
          >
            <Copy className="w-4 h-4 mr-2" />
            Copy Code
          </Button>

          <div className="space-y-2 text-primary-foreground/90 text-sm">
            <p>✓ Share link or invitation code</p>
            <p>✓ Send to friends who need jobs</p>
            <p>✓ A-level subordinate creation when someone joins</p>
            <p>✓ Referral bonuses and task management fees</p>
          </div>
        </CardContent>
      </Card>

      {/* Referral URL */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>Referral Link</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex space-x-2">
            <Input 
              value={referralUrl} 
              readOnly 
              className="flex-1"
            />
            <Button 
              variant="outline"
              onClick={() => copyToClipboard(referralUrl, "Referral link")}
            >
              <Copy className="w-4 h-4" />
            </Button>
          </div>
          
          {/* Share Buttons */}
          <div className="grid grid-cols-2 gap-3">
            <Button 
              variant="outline" 
              onClick={() => shareViaApp("whatsapp")}
              className="justify-start space-x-2"
            >
              <MessageSquare className="w-4 h-4" />
              <span>WhatsApp</span>
            </Button>
            <Button 
              variant="outline" 
              onClick={() => shareViaApp("telegram")}
              className="justify-start space-x-2"
            >
              <Send className="w-4 h-4" />
              <span>Telegram</span>
            </Button>
            <Button 
              variant="outline" 
              onClick={() => shareViaApp("facebook")}
              className="justify-start space-x-2"
            >
              <Facebook className="w-4 h-4" />
              <span>Facebook</span>
            </Button>
            <Button 
              variant="outline" 
              onClick={() => shareViaApp("twitter")}
              className="justify-start space-x-2"
            >
              <Twitter className="w-4 h-4" />
              <span>Twitter</span>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Team Structure */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>My Team Structure</CardTitle>
          <p className="text-muted-foreground">Multi-level commission system</p>
        </CardHeader>
        <CardContent className="space-y-4">
          {teamStructure.map((team, index) => (
            <div key={index} className="p-4 border border-border rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-semibold">{team.level}</h3>
                <Badge variant="outline">{team.commission} Commission</Badge>
              </div>
              
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <p className="text-muted-foreground">Members</p>
                  <p className="font-semibold text-lg">{team.members}</p>
                </div>
                <div>
                  <p className="text-muted-foreground">Earnings</p>
                  <p className="font-semibold text-lg text-success">{team.earnings}</p>
                </div>
                <div>
                  <p className="text-muted-foreground">Validity</p>
                  <p className="font-semibold text-lg">{team.validity}</p>
                </div>
              </div>
            </div>
          ))}
          
          <div className="bg-muted p-4 rounded-lg">
            <p className="text-sm text-muted-foreground mb-2">Total Accumulated Revenue</p>
            <p className="text-2xl font-bold text-success">{totalEarnings.toFixed(2)} PKR</p>
          </div>
        </CardContent>
      </Card>

      {/* Instructions */}
      <Card className="shadow-card border-primary/20">
        <CardHeader>
          <CardTitle className="text-primary">How It Works</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm">
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold">1</div>
            <p>Share your unique invite code or referral link with friends</p>
          </div>
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold">2</div>
            <p>When they sign up and become active, they join your A-level team</p>
          </div>
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold">3</div>
            <p>Earn 12% commission on their task earnings</p>
          </div>
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold">4</div>
            <p>Also earn from their referrals (B & C teams) at 4% and 2%</p>
          </div>
        </CardContent>
      </Card>
      </>
      )}
    </div>
  );
}