const { createClient } = require('@supabase/supabase-js');
const https = require('https');
const { URL } = require('url');
require('dotenv').config();

async function testSupabaseConnectivity() {
  console.log('üîç TESTING SUPABASE CONNECTIVITY...\n');

  // Check environment variables
  console.log('1Ô∏è‚É£ Checking environment variables...');
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
  
  console.log(`   SUPABASE_URL: ${supabaseUrl ? '‚úÖ Set' : '‚ùå Missing'}`);
  console.log(`   SUPABASE_ANON_KEY: ${supabaseAnonKey ? '‚úÖ Set' : '‚ùå Missing'}`);
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.log('‚ùå Missing required environment variables');
    return;
  }

  // Test basic URL accessibility
  console.log('\n2Ô∏è‚É£ Testing basic URL accessibility...');
  try {
    const url = new URL(supabaseUrl);
    console.log(`   Testing connection to: ${url.hostname}`);
    
    await new Promise((resolve, reject) => {
      const req = https.get(`https://${url.hostname}`, (res) => {
        console.log(`   ‚úÖ HTTP Status: ${res.statusCode}`);
        resolve();
      });
      
      req.on('error', (err) => {
        console.log(`   ‚ùå Connection failed: ${err.message}`);
        reject(err);
      });
      
      req.setTimeout(10000, () => {
        console.log('   ‚ùå Connection timeout');
        req.destroy();
        reject(new Error('Timeout'));
      });
    });
  } catch (error) {
    console.log(`   ‚ùå URL test failed: ${error.message}`);
  }

  // Test Supabase client initialization
  console.log('\n3Ô∏è‚É£ Testing Supabase client initialization...');
  try {
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    console.log('   ‚úÖ Supabase client created successfully');

    // Test a simple query
    console.log('\n4Ô∏è‚É£ Testing simple database query...');
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (error) {
      console.log(`   ‚ùå Query failed: ${error.message}`);
      console.log(`   Error code: ${error.code}`);
      console.log(`   Error details:`, error);
    } else {
      console.log('   ‚úÖ Database query successful');
    }

  } catch (error) {
    console.log(`   ‚ùå Supabase client test failed: ${error.message}`);
  }

  // Test auth endpoint specifically
  console.log('\n5Ô∏è‚É£ Testing auth endpoint...');
  try {
    const authUrl = `${supabaseUrl}/auth/v1/settings`;
    console.log(`   Testing: ${authUrl}`);
    
    const response = await fetch(authUrl, {
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`
      }
    });
    
    console.log(`   ‚úÖ Auth endpoint status: ${response.status}`);
  } catch (error) {
    console.log(`   ‚ùå Auth endpoint test failed: ${error.message}`);
  }
}

testSupabaseConnectivity().catch(console.error);